openapi: 3.0.0
info:
  title: E-commerce API
  version: 1.0.0
  description: API for an e-commerce application
paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string, minLength: 3 }
                password: { type: string, minLength: 6 }
                email: { type: string, format: email }
      responses:
        '201': { description: User created }
        '400': { description: Invalid input or user already exists }
        '500': { description: Server error }
  /users/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200': { description: Login successful, returns JWT }
        '400': { description: Invalid input }
        '401': { description: Invalid credentials }
        '500': { description: Server error }
  /users:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of users }
        '401': { description: Unauthorized }
        '500': { description: Server error }
  /users/{userId}:
    get:
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: User details }
        '401': { description: Unauthorized }
        '404': { description: User not found }
        '500': { description: Server error }
    put:
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string, minLength: 3 }
                email: { type: string, format: email }
      responses:
        '200': { description: User updated }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
        '404': { description: User not found }
        '500': { description: Server error }
  /products:
    get:
      summary: Get products
      parameters:
        - name: categoryId
          in: query
          schema: { type: integer }
      responses:
        '200': { description: List of products }
        '400': { description: Invalid categoryId }
        '500': { description: Server error }
    post:
      summary: Create a product (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, minLength: 1 }
                description: { type: string }
                price: { type: number, minimum: 0 }
                categoryId: { type: integer }
      responses:
        '201': { description: Product created }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
        '403': { description: Admin access required }
        '500': { description: Server error }
  /products/{productId}:
    get:
      summary: Get a product by ID
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Product details }
        '404': { description: Product not found }
        '500': { description: Server error }
    put:
      summary: Update a product (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, minLength: 1 }
                description: { type: string }
                price: { type: number, minimum: 0 }
                categoryId: { type: integer }
      responses:
        '200': { description: Product updated }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
        '403': { description: Admin access required }
        '404': { description: Product not found }
        '500': { description: Server error }
    delete:
      summary: Delete a product (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Product deleted }
        '401': { description: Unauthorized }
        '403': { description: Admin access required }
        '404': { description: Product not found }
        '500': { description: Server error }
  /cart:
    post:
      summary: Create a new cart
      security:
        - bearerAuth: []
      responses:
        '201': { description: Cart created }
        '401': { description: Unauthorized }
        '500': { description: Server error }
  /cart/{cartId}:
    post:
      summary: Add item to cart
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: { type: integer }
                quantity: { type: integer, minimum: 1 }
      responses:
        '201': { description: Item added to cart }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
        '404': { description: Cart or product not found }
        '500': { description: Server error }
    get:
      summary: Get cart details
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Cart details }
        '401': { description: Unauthorized }
        '404': { description: Cart not found }
        '500': { description: Server error }
  /cart/{cartId}/checkout:
    post:
      summary: Checkout a cart
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Order created }
        '400': { description: Cart is empty }
        '401': { description: Unauthorized }
        '404': { description: Cart not found }
        '500': { description: Server error }
  /orders:
    get:
      summary: Get all orders for a user
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of orders }
        '401': { description: Unauthorized }
        '500': { description: Server error }
  /orders/{orderId}:
    get:
      summary: Get an order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Order details }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
        '500': { description: Server error }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT